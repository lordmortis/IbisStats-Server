// Code generated by go-bindata. DO NOT EDIT.
// sources:
// datasource/migrations/1569651540_users.down.sql (19B)
// datasource/migrations/1569651540_users.up.sql (221B)

package migrationData

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1569651540_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\x06\x04\x00\x00\xff\xff\xc2\x23\x41\xc8\x13\x00\x00\x00")

func _1569651540_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569651540_usersDownSql,
		"1569651540_users.down.sql",
	)
}

func _1569651540_usersDownSql() (*asset, error) {
	bytes, err := _1569651540_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569651540_users.down.sql", size: 19, mode: os.FileMode(0666), modTime: time.Unix(1569652184, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x16, 0xef, 0x60, 0x8a, 0x67, 0x69, 0x63, 0x7d, 0xcd, 0x2d, 0x38, 0xad, 0xc3, 0x7f, 0x3c, 0xd8, 0xfb, 0xeb, 0x6a, 0xfd, 0xf9, 0x41, 0x2c, 0x23, 0x70, 0x29, 0x6, 0x9a, 0xf6, 0xaa, 0xef}}
	return a, nil
}

var __1569651540_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xaa\xc2\x30\x18\xc5\xf1\xbd\xd0\x77\x38\x74\x6a\xe1\x0e\x77\x70\x73\xaa\x9a\xa1\x58\xab\x96\x66\xe8\x24\x9f\xcd\x07\x06\x4c\x0d\x49\x54\xfa\xf6\x52\xac\x82\x3a\xff\x7f\x07\xce\xb2\x16\x79\x23\xd0\xe4\x8b\x52\x20\xb9\x7a\x76\x3e\x41\x1a\x47\x00\xa0\x15\xa4\x2c\x56\xa8\xb6\x0d\x2a\x59\x96\xd8\xd5\xc5\x26\xaf\x5b\xac\x45\xfb\xf7\x24\xe3\xa0\x27\xc3\xb8\x91\xeb\x4e\xe4\xd2\xd9\x7f\x06\x59\x15\x7b\x29\xde\xb3\x89\xb2\x21\x7d\xfe\x70\xdf\xa0\xef\xdc\x60\x03\xab\x83\x25\xef\xef\x17\xa7\x70\x1c\x02\xd3\x94\x3b\xc7\x34\x46\x0a\x08\xda\xb0\x0f\x64\xec\xeb\x85\x55\x3f\x29\x8e\xb2\xf9\x23\x00\x00\xff\xff\x7b\x37\x70\xf8\xdd\x00\x00\x00")

func _1569651540_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569651540_usersUpSql,
		"1569651540_users.up.sql",
	)
}

func _1569651540_usersUpSql() (*asset, error) {
	bytes, err := _1569651540_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569651540_users.up.sql", size: 221, mode: os.FileMode(0666), modTime: time.Unix(1569652188, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x85, 0xd3, 0x1d, 0xf5, 0x6d, 0x62, 0x23, 0xad, 0xad, 0x25, 0xa4, 0x38, 0x8a, 0xdb, 0xba, 0xe0, 0x9b, 0xcb, 0x68, 0x25, 0xec, 0x8b, 0x18, 0x37, 0xbe, 0x7d, 0x49, 0xbc, 0x50, 0x5f, 0x61}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1569651540_users.down.sql": _1569651540_usersDownSql,

	"1569651540_users.up.sql": _1569651540_usersUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1569651540_users.down.sql": &bintree{_1569651540_usersDownSql, map[string]*bintree{}},
	"1569651540_users.up.sql":   &bintree{_1569651540_usersUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
