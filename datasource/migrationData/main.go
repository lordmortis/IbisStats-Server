// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../datasource/migrations/1569651540_users.down.sql (19B)
// ../datasource/migrations/1569651540_users.up.sql (247B)
// ../datasource/migrations/1569658812_games.down.sql (19B)
// ../datasource/migrations/1569658812_games.up.sql (172B)
// ../datasource/migrations/1569658821_players.down.sql (21B)
// ../datasource/migrations/1569658821_players.up.sql (155B)
// ../datasource/migrations/1569658839_user_games.down.sql (23B)
// ../datasource/migrations/1569658839_user_games.up.sql (309B)
// ../datasource/migrations/1569659226_game_stats.down.sql (53B)
// ../datasource/migrations/1569659226_game_stats.up.sql (265B)

package migrationData

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1569651540_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\x06\x04\x00\x00\xff\xff\xc2\x23\x41\xc8\x13\x00\x00\x00")

func _1569651540_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569651540_usersDownSql,
		"1569651540_users.down.sql",
	)
}

func _1569651540_usersDownSql() (*asset, error) {
	bytes, err := _1569651540_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569651540_users.down.sql", size: 19, mode: os.FileMode(0666), modTime: time.Unix(1569652186, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x16, 0xef, 0x60, 0x8a, 0x67, 0x69, 0x63, 0x7d, 0xcd, 0x2d, 0x38, 0xad, 0xc3, 0x7f, 0x3c, 0xd8, 0xfb, 0xeb, 0x6a, 0xfd, 0xf9, 0x41, 0x2c, 0x23, 0x70, 0x29, 0x6, 0x9a, 0xf6, 0xaa, 0xef}}
	return a, nil
}

var __1569651540_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x6b\x84\x30\x18\xc6\xf1\x5d\xf0\x3b\x3c\x38\x29\x74\xe8\xd0\xad\x93\x6d\x33\x48\xad\x6d\xc5\x0c\x4e\xf2\x6a\x5e\x68\xc0\xc4\x90\xc4\x16\xbf\x7d\x91\xf3\x0e\xee\x6e\x7e\x7e\x7f\x78\x5e\x5b\x51\x76\x02\x5d\xf9\x52\x0b\x64\x6b\x60\x1f\x32\xe4\x69\x02\x00\x5a\x41\xca\xea\x0d\xcd\x67\x87\x46\xd6\x35\xbe\xda\xea\xa3\x6c\x7b\xbc\x8b\xfe\xe1\x44\xf6\xc0\x92\x61\xfc\x92\x9f\x7e\xc8\xe7\x4f\x8f\x05\x64\x53\x7d\x4b\x71\xc9\x0e\xca\x86\xf4\x7c\xe5\x6e\x81\x9d\xfc\xe6\x22\xab\xc1\x51\x08\x7f\x8b\x57\x18\xb7\xc8\x74\xcc\x61\x75\xec\x07\x52\x46\x5b\x8c\xcb\x32\x33\xd9\x63\x99\x3c\xd3\x9e\x51\x44\xd4\x86\x43\x24\xe3\xce\xff\x9c\xba\x9b\xd2\xa4\x78\xfe\x0f\x00\x00\xff\xff\x53\x8c\x3e\x4e\xf7\x00\x00\x00")

func _1569651540_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569651540_usersUpSql,
		"1569651540_users.up.sql",
	)
}

func _1569651540_usersUpSql() (*asset, error) {
	bytes, err := _1569651540_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569651540_users.up.sql", size: 247, mode: os.FileMode(0666), modTime: time.Unix(1569658230, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x1b, 0x22, 0x2d, 0x63, 0xd5, 0x23, 0x13, 0x59, 0x9f, 0x4e, 0xff, 0xc, 0x81, 0x8c, 0x41, 0x65, 0xf7, 0x32, 0x6, 0x93, 0x70, 0x48, 0xe1, 0x26, 0x42, 0xaa, 0xe2, 0xea, 0x21, 0x41, 0x19}}
	return a, nil
}

var __1569658812_gamesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\x4f\xcc\x4d\x2d\x56\xb2\x06\x04\x00\x00\xff\xff\x52\x29\xa0\x8b\x13\x00\x00\x00")

func _1569658812_gamesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658812_gamesDownSql,
		"1569658812_games.down.sql",
	)
}

func _1569658812_gamesDownSql() (*asset, error) {
	bytes, err := _1569658812_gamesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658812_games.down.sql", size: 19, mode: os.FileMode(0666), modTime: time.Unix(1569659000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xaf, 0x8c, 0x2b, 0xe6, 0xc8, 0x89, 0x12, 0xf5, 0x86, 0xde, 0xf5, 0x4c, 0x56, 0xe2, 0x7e, 0x40, 0x7f, 0x7c, 0xb1, 0x93, 0xdd, 0xed, 0xf7, 0x4c, 0xf5, 0x40, 0xcb, 0x44, 0xfb, 0xe5, 0x3e}}
	return a, nil
}

var __1569658812_gamesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x50\x4a\x4f\xcc\x4d\x2d\x56\x52\xd0\xe0\xe5\x52\x00\x81\xcc\x14\x85\xd0\x50\x4f\x17\x05\x3f\xff\x10\x05\xbf\x50\x1f\x1f\x85\x80\x20\x4f\x5f\xc7\xa0\x48\x05\x6f\xd7\x48\x1d\xa8\x9a\xbc\xc4\xdc\x54\x85\x92\xd4\x8a\x12\xb8\x2a\x98\x4c\x71\x6a\x72\x51\x6a\x89\x42\x52\x65\x49\x6a\x22\x86\x64\x72\x51\x6a\x62\x49\x6a\x4a\x7c\x62\x89\x42\x49\x66\x6e\x6a\x71\x49\x62\x6e\x01\x4c\xae\xb4\x20\x05\x43\x8e\x97\x4b\xd3\x1a\x10\x00\x00\xff\xff\x93\x6f\x09\x3b\xac\x00\x00\x00")

func _1569658812_gamesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658812_gamesUpSql,
		"1569658812_games.up.sql",
	)
}

func _1569658812_gamesUpSql() (*asset, error) {
	bytes, err := _1569658812_gamesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658812_games.up.sql", size: 172, mode: os.FileMode(0666), modTime: time.Unix(1569659072, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0xed, 0x1e, 0xde, 0xaa, 0xe7, 0x10, 0x18, 0x1, 0x5f, 0x84, 0x1a, 0x66, 0xe1, 0x62, 0x28, 0x7c, 0xc0, 0x26, 0x48, 0x8, 0x34, 0xa6, 0xf8, 0xee, 0xed, 0x2b, 0x73, 0x3, 0x24, 0xc5, 0xf4}}
	return a, nil
}

var __1569658821_playersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\xc8\x49\xac\x4c\x2d\x2a\x56\xb2\x06\x04\x00\x00\xff\xff\xe4\xb2\x6b\x27\x15\x00\x00\x00")

func _1569658821_playersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658821_playersDownSql,
		"1569658821_players.down.sql",
	)
}

func _1569658821_playersDownSql() (*asset, error) {
	bytes, err := _1569658821_playersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658821_players.down.sql", size: 21, mode: os.FileMode(0666), modTime: time.Unix(1569659098, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x84, 0xe, 0x4b, 0x93, 0xea, 0x64, 0xf1, 0x62, 0x1c, 0x74, 0xea, 0x1, 0x53, 0x4d, 0x4e, 0x19, 0x2f, 0xd2, 0xdd, 0xca, 0xe5, 0x5b, 0x80, 0x4c, 0x22, 0xb9, 0x8, 0x4d, 0xc9, 0xfb, 0xf4}}
	return a, nil
}

var __1569658821_playersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xca\xb1\xaa\xc2\x30\x14\x87\xf1\xbd\xd0\x77\xf8\xd3\xe9\x5e\xf0\x0d\x9c\xaa\x66\x28\xc6\xa8\x21\x19\x3a\xc9\xd1\x1c\x68\xa0\x91\xd0\x1c\xc1\xbe\xbd\x64\x71\x71\xfc\x3e\x7e\x7b\xab\x7a\xa7\xe0\xfa\x9d\x56\xe8\xf2\x4c\x2b\x2f\xa5\xc3\x5f\xdb\x20\x06\x78\x3f\x1c\x60\xce\x0e\xc6\x6b\x8d\x8b\x1d\x4e\xbd\x1d\x71\x54\xe3\xa6\x6d\xc0\x89\xe2\x3c\x51\x99\x70\x5f\x85\x09\xde\x0c\x57\xaf\xbe\xbc\x92\x27\x25\x86\xf0\x5b\x6a\x3c\x16\x26\xe1\x70\x23\x81\xc4\xc4\x45\x28\xe5\xfa\x5f\x39\xfc\xfc\xb6\xf9\xdf\x7e\x02\x00\x00\xff\xff\x15\x3d\xee\x72\x9b\x00\x00\x00")

func _1569658821_playersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658821_playersUpSql,
		"1569658821_players.up.sql",
	)
}

func _1569658821_playersUpSql() (*asset, error) {
	bytes, err := _1569658821_playersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658821_players.up.sql", size: 155, mode: os.FileMode(0666), modTime: time.Unix(1574576147, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xc1, 0x99, 0x4c, 0x45, 0x6d, 0xe1, 0x4a, 0x57, 0x9, 0x7c, 0xb2, 0x3e, 0x3d, 0x5, 0x2c, 0x15, 0xe3, 0x4b, 0xf6, 0x35, 0x5, 0x0, 0x4f, 0xa1, 0xd1, 0xc, 0x8f, 0xff, 0x4a, 0x12, 0x79}}
	return a, nil
}

var __1569658839_user_gamesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x8a\x4f\x4f\xcc\x4d\x55\xb2\x06\x04\x00\x00\xff\xff\xa2\xa3\x14\x0f\x17\x00\x00\x00")

func _1569658839_user_gamesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658839_user_gamesDownSql,
		"1569658839_user_games.down.sql",
	)
}

func _1569658839_user_gamesDownSql() (*asset, error) {
	bytes, err := _1569658839_user_gamesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658839_user_games.down.sql", size: 23, mode: os.FileMode(0666), modTime: time.Unix(1569659194, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xe7, 0x16, 0x6a, 0x70, 0x5f, 0x30, 0x4b, 0xce, 0x23, 0xea, 0x71, 0x1d, 0xac, 0x7, 0xb4, 0xde, 0xfb, 0x11, 0x48, 0x21, 0xbf, 0xc9, 0xa4, 0xa2, 0x2b, 0xb5, 0xda, 0xa9, 0xcb, 0xf3, 0x62}}
	return a, nil
}

var __1569658839_user_gamesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\x6a\x84\x30\x18\x84\xef\x82\xef\x30\x78\x49\x04\xdf\xc0\x53\xda\xe6\x20\x55\x2b\xd6\x1c\x3c\x49\x30\x7f\x8b\x07\xad\x24\x91\xd2\xb7\x2f\xab\x66\x59\x76\x61\xcf\xf3\x7d\x33\xcc\x6b\x2b\x45\x27\xd1\xf5\x8d\xc4\xe6\xc8\x0e\xdf\x7a\xa6\xc1\xff\xad\x04\xf1\x09\x59\xab\x0a\x9c\xfd\xfc\x2e\x64\x59\x06\x66\x49\x1b\xb2\x2c\xcd\xe3\x28\x88\xe2\xa5\x94\x48\xae\x6a\x02\x1e\x47\x00\x8e\xb2\xc9\x40\xa9\xe2\x0d\xf5\x47\x87\x5a\x95\x25\x2c\x7d\x91\xa5\x65\x24\xb7\x03\x8e\x4f\x26\xcd\x0e\x61\x1f\x7e\x26\x5c\x80\x5b\xa1\x69\x8b\x4a\xb4\x3d\xde\x65\xcf\xcf\xb5\x2c\xb4\x04\x66\x3f\x72\xf7\x2b\x74\x9f\xc8\x68\x49\x7b\x32\x83\xf6\xf0\xd3\x4c\xce\xeb\x79\x3d\xa3\x6d\x35\x0f\x51\x1c\xa5\xf9\x7f\x00\x00\x00\xff\xff\xa7\x2e\x52\x5a\x35\x01\x00\x00")

func _1569658839_user_gamesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569658839_user_gamesUpSql,
		"1569658839_user_games.up.sql",
	)
}

func _1569658839_user_gamesUpSql() (*asset, error) {
	bytes, err := _1569658839_user_gamesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569658839_user_games.up.sql", size: 309, mode: os.FileMode(0666), modTime: time.Unix(1574576241, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x9e, 0x59, 0x39, 0x7a, 0x49, 0x4e, 0xe7, 0xc4, 0xb4, 0x65, 0x2c, 0x24, 0x10, 0x4c, 0x3, 0xfc, 0x83, 0x16, 0xe1, 0xe6, 0x42, 0xa0, 0x53, 0xd8, 0xd2, 0x98, 0x4c, 0x8c, 0x52, 0x79, 0xce}}
	return a, nil
}

var __1569659226_game_statsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\x4f\xcc\x4d\x8d\x2f\x2e\x49\x2c\x29\x56\xb2\xe6\xe5\x82\xc8\x44\x06\x20\x4b\xc4\x97\x54\x16\xa4\x2a\x59\x03\x02\x00\x00\xff\xff\x4b\x52\x0f\x24\x35\x00\x00\x00")

func _1569659226_game_statsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569659226_game_statsDownSql,
		"1569659226_game_stats.down.sql",
	)
}

func _1569659226_game_statsDownSql() (*asset, error) {
	bytes, err := _1569659226_game_statsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569659226_game_stats.down.sql", size: 53, mode: os.FileMode(0666), modTime: time.Unix(1569659490, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0xaf, 0xf3, 0xe3, 0xde, 0xc, 0x8a, 0x6f, 0xc8, 0x66, 0x5e, 0x51, 0x9, 0xda, 0x9c, 0x69, 0xec, 0xa1, 0xb0, 0xea, 0x54, 0x87, 0xd9, 0x71, 0x98, 0xbb, 0x93, 0xa1, 0xb1, 0xdc, 0xdd, 0xff}}
	return a, nil
}

var __1569659226_game_statsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x6a\x84\x30\x14\x45\xf7\x81\xfc\xc3\x65\x36\x51\x98\x3f\x98\x55\xda\x66\x21\x55\x2b\xd6\x2c\x5c\x49\x30\xaf\xc5\x45\xac\x24\xaf\xd0\xfe\x7d\x89\xa5\x52\xc6\xed\x79\xe7\xf2\xce\x63\x6f\xf4\x60\x30\x8c\x9d\xc1\xbb\x0b\x34\x25\x76\x3c\xf1\xf7\x46\xd0\xaf\x30\xad\x6d\x50\xa8\x34\x7f\x44\x52\x57\x28\x5e\x02\xa9\xf2\x26\xc5\xdf\x4c\x3f\xd4\x06\x97\x63\x98\x2e\x28\xa4\xc0\xe2\x61\x6d\xf5\x84\xf6\x65\x40\x6b\xeb\x1a\x5d\x5f\x35\xba\x1f\xf1\x6c\xc6\xab\x14\xbf\x8f\x4e\x52\xa4\x37\x8a\xb4\xce\x94\x76\x21\x15\x8b\x2f\xb3\xbd\xba\x40\x60\xfa\xe2\x43\xcd\x74\x4f\xbc\x2b\xfe\x7f\x9f\x23\x39\x26\x3f\x39\x46\xae\x4e\xec\xc2\x96\xf9\xe7\xe6\x4f\x5c\x8a\xf2\xf6\x13\x00\x00\xff\xff\x6c\x9a\x28\x0b\x09\x01\x00\x00")

func _1569659226_game_statsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1569659226_game_statsUpSql,
		"1569659226_game_stats.up.sql",
	)
}

func _1569659226_game_statsUpSql() (*asset, error) {
	bytes, err := _1569659226_game_statsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1569659226_game_stats.up.sql", size: 265, mode: os.FileMode(0666), modTime: time.Unix(1574575775, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xe, 0x3f, 0x3c, 0x4f, 0x71, 0x8, 0xb6, 0x5, 0x11, 0x29, 0xc5, 0x5f, 0x28, 0x2e, 0x5c, 0x64, 0xee, 0x93, 0x42, 0xcf, 0x2f, 0xd2, 0xfa, 0xf2, 0x97, 0x3c, 0x33, 0xf0, 0x9a, 0x2f, 0xe2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1569651540_users.down.sql":      _1569651540_usersDownSql,
	"1569651540_users.up.sql":        _1569651540_usersUpSql,
	"1569658812_games.down.sql":      _1569658812_gamesDownSql,
	"1569658812_games.up.sql":        _1569658812_gamesUpSql,
	"1569658821_players.down.sql":    _1569658821_playersDownSql,
	"1569658821_players.up.sql":      _1569658821_playersUpSql,
	"1569658839_user_games.down.sql": _1569658839_user_gamesDownSql,
	"1569658839_user_games.up.sql":   _1569658839_user_gamesUpSql,
	"1569659226_game_stats.down.sql": _1569659226_game_statsDownSql,
	"1569659226_game_stats.up.sql":   _1569659226_game_statsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1569651540_users.down.sql":      &bintree{_1569651540_usersDownSql, map[string]*bintree{}},
	"1569651540_users.up.sql":        &bintree{_1569651540_usersUpSql, map[string]*bintree{}},
	"1569658812_games.down.sql":      &bintree{_1569658812_gamesDownSql, map[string]*bintree{}},
	"1569658812_games.up.sql":        &bintree{_1569658812_gamesUpSql, map[string]*bintree{}},
	"1569658821_players.down.sql":    &bintree{_1569658821_playersDownSql, map[string]*bintree{}},
	"1569658821_players.up.sql":      &bintree{_1569658821_playersUpSql, map[string]*bintree{}},
	"1569658839_user_games.down.sql": &bintree{_1569658839_user_gamesDownSql, map[string]*bintree{}},
	"1569658839_user_games.up.sql":   &bintree{_1569658839_user_gamesUpSql, map[string]*bintree{}},
	"1569659226_game_stats.down.sql": &bintree{_1569659226_game_statsDownSql, map[string]*bintree{}},
	"1569659226_game_stats.up.sql":   &bintree{_1569659226_game_statsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
