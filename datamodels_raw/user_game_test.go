// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserGames(t *testing.T) {
	t.Parallel()

	query := UserGames()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserGamesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGamesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserGames().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGamesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserGameSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGamesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserGameExists(ctx, tx, o.UserID, o.GameID)
	if err != nil {
		t.Errorf("Unable to check if UserGame exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserGameExists to return true, but got false.")
	}
}

func testUserGamesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userGameFound, err := FindUserGame(ctx, tx, o.UserID, o.GameID)
	if err != nil {
		t.Error(err)
	}

	if userGameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserGamesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserGames().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserGamesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserGames().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserGamesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userGameOne := &UserGame{}
	userGameTwo := &UserGame{}
	if err = randomize.Struct(seed, userGameOne, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}
	if err = randomize.Struct(seed, userGameTwo, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userGameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userGameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserGames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserGamesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userGameOne := &UserGame{}
	userGameTwo := &UserGame{}
	if err = randomize.Struct(seed, userGameOne, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}
	if err = randomize.Struct(seed, userGameTwo, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userGameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userGameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userGameBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func userGameAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGame) error {
	*o = UserGame{}
	return nil
}

func testUserGamesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserGame{}
	o := &UserGame{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userGameDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserGame object: %s", err)
	}

	AddUserGameHook(boil.BeforeInsertHook, userGameBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userGameBeforeInsertHooks = []UserGameHook{}

	AddUserGameHook(boil.AfterInsertHook, userGameAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userGameAfterInsertHooks = []UserGameHook{}

	AddUserGameHook(boil.AfterSelectHook, userGameAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userGameAfterSelectHooks = []UserGameHook{}

	AddUserGameHook(boil.BeforeUpdateHook, userGameBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userGameBeforeUpdateHooks = []UserGameHook{}

	AddUserGameHook(boil.AfterUpdateHook, userGameAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userGameAfterUpdateHooks = []UserGameHook{}

	AddUserGameHook(boil.BeforeDeleteHook, userGameBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userGameBeforeDeleteHooks = []UserGameHook{}

	AddUserGameHook(boil.AfterDeleteHook, userGameAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userGameAfterDeleteHooks = []UserGameHook{}

	AddUserGameHook(boil.BeforeUpsertHook, userGameBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userGameBeforeUpsertHooks = []UserGameHook{}

	AddUserGameHook(boil.AfterUpsertHook, userGameAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userGameAfterUpsertHooks = []UserGameHook{}
}

func testUserGamesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserGamesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userGameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserGameToOneGameUsingGame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserGame
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserGameSlice{&local}
	if err = local.L.LoadGame(ctx, tx, false, (*[]*UserGame)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserGameToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserGame
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userGameDBTypes, false, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserGameSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserGame)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserGameToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserGame
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userGameDBTypes, false, strmangle.SetComplement(userGamePrimaryKeyColumns, userGameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserGames[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		if exists, err := UserGameExists(ctx, tx, a.UserID, a.GameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserGameToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserGame
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userGameDBTypes, false, strmangle.SetComplement(userGamePrimaryKeyColumns, userGameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserGames[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserGameExists(ctx, tx, a.UserID, a.GameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserGamesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserGamesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserGameSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserGamesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserGames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userGameDBTypes = map[string]string{`UserID`: `uuid`, `GameID`: `uuid`, `Type`: `enum.user_game_type('owner','reader')`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testUserGamesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userGamePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userGameAllColumns) == len(userGamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserGamesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userGameAllColumns) == len(userGamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserGame{}
	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userGameDBTypes, true, userGamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userGameAllColumns, userGamePrimaryKeyColumns) {
		fields = userGameAllColumns
	} else {
		fields = strmangle.SetComplement(
			userGameAllColumns,
			userGamePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserGameSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserGamesUpsert(t *testing.T) {
	t.Parallel()

	if len(userGameAllColumns) == len(userGamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserGame{}
	if err = randomize.Struct(seed, &o, userGameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserGame: %s", err)
	}

	count, err := UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userGameDBTypes, false, userGamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGame struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserGame: %s", err)
	}

	count, err = UserGames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
